# this test is autogenerated by ChatGPT
# Prompt: Using pytest and its functions, such as fixtures, parameterize, raises and mark, wherever appropriate, create a test for the following code. Theme it after Harry Potter:

import pytest
from source.school import Classroom, Student, Teacher, TooManyStudents

# Fixtures for reusable resources
@pytest.fixture
def harry():
    return Student(name="Harry Potter")

@pytest.fixture
def hermione():
    return Student(name="Hermione Granger")

@pytest.fixture
def ron():
    return Student(name="Ron Weasley")

@pytest.fixture
def snape():
    return Teacher(name="Severus Snape")

@pytest.fixture
def dumbledore():
    return Teacher(name="Albus Dumbledore")

@pytest.fixture
def potions_class(snape):
    return Classroom(teacher=snape, students=[], course_title="Potions")

@pytest.fixture
def defense_class(dumbledore):
    return Classroom(teacher=dumbledore, students=[], course_title="Defense Against the Dark Arts")

# Test adding students
def test_add_student(potions_class, harry):
    potions_class.add_student(harry)
    assert harry in potions_class.students

# Test adding too many students
def test_add_too_many_students(potions_class, harry):
    for i in range(11):
        potions_class.add_student(Student(name=f"Student{i}"))
    with pytest.raises(TooManyStudents):
        potions_class.add_student(harry)

# Test removing a student
def test_remove_student(potions_class, harry, hermione):
    potions_class.add_student(harry)
    potions_class.add_student(hermione)
    potions_class.remove_student("Harry Potter")
    assert harry not in potions_class.students

# Test changing the teacher
def test_change_teacher(potions_class, dumbledore):
    potions_class.change_teacher(dumbledore)
    assert potions_class.teacher == dumbledore

# Parametrized test for checking the correct teacher is assigned
@pytest.mark.parametrize("teacher, course_title", [
    ("Severus Snape", "Potions"),
    ("Albus Dumbledore", "Defense Against the Dark Arts"),
])
def test_teacher_assignment(teacher, course_title):
    classroom = Classroom(teacher=Teacher(name=teacher), students=[], course_title=course_title)
    assert classroom.teacher.name == teacher
    assert classroom.course_title == course_title

# Running this file with pytest will execute all the tests with the scenarios defined.